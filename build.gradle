task hello {
    doLast {
        println 'Hello World!'
    }
}

// ////////////////////////
task hello2 << {
    println 'Hello World! 2'
}

// ////////////////////////
task upper << {
    String someString = 'mY_nAmE'
    println "Original: " + someString 
    println "Upper case: " + someString.toUpperCase()
}

// ////////////////////////
task count << {
    4.times { print "$it " }
}

// ////////////////////////
task intro(dependsOn: hello) << {
    println "I'm Gradle"
}

// ////////////////////////
task taskX(dependsOn: 'taskY') << {
    println 'taskX'
}
task taskY << {
    println 'taskY'
}

// ////////////////////////
4.times { counter ->
    task "task$counter" << {
        println "I'm task number $counter"
    }
}
task0.dependsOn task2, task3

// ////////////////////////
task helloWorld << {
    println 'Hello Earth'
}
helloWorld.doFirst {
    println 'Hello Venus'
}
helloWorld.doLast {
    println 'Hello Mars'
    println "Greetings from the $helloWorld.name task."
}
helloWorld << {
    println 'Hello Jupiter'
}

// ////////////////////////
// Adding extra properties to a task
task myTask {
    ext.myProperty = "myValue"
}
task printTaskProperties << {
    println myTask.myProperty
}

// ////////////////////////
// Using AntBuilder to execute ant.loadfile target
task loadfile << {
    def files = file('./antLoadfileResources').listFiles().sort()
    files.each { File file ->
        if (file.isFile()) {
            ant.loadfile(srcFile: file, property: file.name)
            println " *** $file.name ***"
            println "${ant.properties[file.name]}"
        }
    }
}

// ////////////////////////
// Using methods to organize your build logic
task checksum << {
    fileList('./antLoadfileResources').each {File file ->
        ant.checksum(file: file, property: "cs_$file.name")
        println "$file.name Checksum: ${ant.properties["cs_$file.name"]}"
    }
}
task listfile << {
    fileList('./antLoadfileResources').each {File file ->
        ant.loadfile(srcFile: file, property: file.name)
        println "I'm fond of $file.name"
    }
}
File[] fileList(String dir) {
    file(dir).listFiles({file -> file.isFile() } as FileFilter).sort()
}

// ////////////////////////
// Defining a default tasks
defaultTasks 'clean', 'run'
task clean << {
    println 'Default Cleaning!'
}
task run << {
    println 'Default Running!'
}
task other << {
    println "I'm not a default task!"
}

// ////////////////////////
// Different outcomes of build depending on chosen tasks
task distribution << {
    println "We build the zip with version=$version"
}
task release(dependsOn: 'distribution') << {
    println 'We release now'
}
gradle.taskGraph.whenReady {taskGraph ->
    if (taskGraph.hasTask(release)) {
        version = '1.0'
    } else {
        version = '1.0-SNAPSHOT'
    }
}


